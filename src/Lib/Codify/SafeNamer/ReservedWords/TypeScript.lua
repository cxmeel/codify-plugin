--!strict
local Sift = require(script.Parent.Parent.Parent.Parent.Parent.Packages.Sift)
local Set, Array = Sift.Set, Sift.Array

local LUAU_RESERVED = Array.toSet(require(script.Parent.Luau))

--[[
  A list of reserved words in TypeScript.
]]
local TS_RESERVED = Array.toSet({
	-- TypeScript reserved words
	"abstract",
	"as",
	"asserts",
	"async",
	"await",
	"boolean",
	"break",
	"case",
	"catch",
	"class",
	"const",
	"constructor",
	"continue",
	"debugger",
	"declare",
	"default",
	"delete",
	"do",
	"else",
	"enum",
	"export",
	"extends",
	"false",
	"finally",
	"for",
	"from",
	"function",
	"get",
	"if",
	"implements",
	"import",
	"in",
	"infer",
	"instanceof",
	"interface",
	"is",
	"keyof",
	"let",
	"module",
	"namespace",
	"never",
	"new",
	"null",
	"number",
	"object",
	"package",
	"private",
	"protected",
	"public",
	"readonly",
	"require",
	"return",
	"set",
	"static",
	"string",
	"super",
	"switch",
	"symbol",
	"this",
	"throw",
	"true",
	"try",
	"type",
	"typeof",
	"undefined",
	"unique",
	"unknown",
	"var",
	"void",
	"while",
	"with",
	"yield",
})

return Set.toArray(Set.merge(LUAU_RESERVED, TS_RESERVED)) :: { string }
